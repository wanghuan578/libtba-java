/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef login_TYPES_H
#define login_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace essential { namespace login {

struct MessageType {
  enum type {
    MT_CLIENT_PASSWORD_LOGIN_REQ = 500,
    MT_CLIENT_LOGIN_RES = 501,
    MT_CLIENT_LOGOUT_REQ = 502,
    MT_CLIENT_LOGOUT_RES = 503
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

class ClientPasswordLoginReq;

class ClientPasswordLoginReqChecksum;

class ClientLoginRes;

class LogoutReq;

class LogoutRes;

typedef struct _ClientPasswordLoginReq__isset {
  _ClientPasswordLoginReq__isset() : user_id(false), client_random(false), client_mac(false), client_version(false), check_sum(false) {}
  bool user_id :1;
  bool client_random :1;
  bool client_mac :1;
  bool client_version :1;
  bool check_sum :1;
} _ClientPasswordLoginReq__isset;

class ClientPasswordLoginReq : public virtual ::apache::thrift::TBase {
 public:

  ClientPasswordLoginReq(const ClientPasswordLoginReq&);
  ClientPasswordLoginReq& operator=(const ClientPasswordLoginReq&);
  ClientPasswordLoginReq() : user_id(0), client_random(0), client_mac(), client_version(), check_sum() {
  }

  virtual ~ClientPasswordLoginReq() throw();
  int64_t user_id;
  int64_t client_random;
  std::string client_mac;
  std::string client_version;
  std::string check_sum;

  _ClientPasswordLoginReq__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_client_random(const int64_t val);

  void __set_client_mac(const std::string& val);

  void __set_client_version(const std::string& val);

  void __set_check_sum(const std::string& val);

  bool operator == (const ClientPasswordLoginReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(client_version == rhs.client_version))
      return false;
    if (!(check_sum == rhs.check_sum))
      return false;
    return true;
  }
  bool operator != (const ClientPasswordLoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientPasswordLoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientPasswordLoginReq &a, ClientPasswordLoginReq &b);

inline std::ostream& operator<<(std::ostream& out, const ClientPasswordLoginReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ClientPasswordLoginReqChecksum__isset {
  _ClientPasswordLoginReqChecksum__isset() : user_id(false), password(false), client_random(false), server_random(false) {}
  bool user_id :1;
  bool password :1;
  bool client_random :1;
  bool server_random :1;
} _ClientPasswordLoginReqChecksum__isset;

class ClientPasswordLoginReqChecksum : public virtual ::apache::thrift::TBase {
 public:

  ClientPasswordLoginReqChecksum(const ClientPasswordLoginReqChecksum&);
  ClientPasswordLoginReqChecksum& operator=(const ClientPasswordLoginReqChecksum&);
  ClientPasswordLoginReqChecksum() : user_id(0), password(), client_random(0), server_random(0) {
  }

  virtual ~ClientPasswordLoginReqChecksum() throw();
  int64_t user_id;
  std::string password;
  int64_t client_random;
  int64_t server_random;

  _ClientPasswordLoginReqChecksum__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_password(const std::string& val);

  void __set_client_random(const int64_t val);

  void __set_server_random(const int64_t val);

  bool operator == (const ClientPasswordLoginReqChecksum & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    return true;
  }
  bool operator != (const ClientPasswordLoginReqChecksum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientPasswordLoginReqChecksum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientPasswordLoginReqChecksum &a, ClientPasswordLoginReqChecksum &b);

inline std::ostream& operator<<(std::ostream& out, const ClientPasswordLoginReqChecksum& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ClientLoginRes__isset {
  _ClientLoginRes__isset() : error_code(false), error_text(false), session_ticket(false) {}
  bool error_code :1;
  bool error_text :1;
  bool session_ticket :1;
} _ClientLoginRes__isset;

class ClientLoginRes : public virtual ::apache::thrift::TBase {
 public:

  ClientLoginRes(const ClientLoginRes&);
  ClientLoginRes& operator=(const ClientLoginRes&);
  ClientLoginRes() : error_code(0), error_text(), session_ticket() {
  }

  virtual ~ClientLoginRes() throw();
  int32_t error_code;
  std::string error_text;
  std::string session_ticket;

  _ClientLoginRes__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_text(const std::string& val);

  void __set_session_ticket(const std::string& val);

  bool operator == (const ClientLoginRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    return true;
  }
  bool operator != (const ClientLoginRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientLoginRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientLoginRes &a, ClientLoginRes &b);

inline std::ostream& operator<<(std::ostream& out, const ClientLoginRes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LogoutReq__isset {
  _LogoutReq__isset() : user_id(false), session_ticket(false) {}
  bool user_id :1;
  bool session_ticket :1;
} _LogoutReq__isset;

class LogoutReq : public virtual ::apache::thrift::TBase {
 public:

  LogoutReq(const LogoutReq&);
  LogoutReq& operator=(const LogoutReq&);
  LogoutReq() : user_id(0), session_ticket() {
  }

  virtual ~LogoutReq() throw();
  int64_t user_id;
  std::string session_ticket;

  _LogoutReq__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_session_ticket(const std::string& val);

  bool operator == (const LogoutReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    return true;
  }
  bool operator != (const LogoutReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogoutReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogoutReq &a, LogoutReq &b);

inline std::ostream& operator<<(std::ostream& out, const LogoutReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LogoutRes__isset {
  _LogoutRes__isset() : error_code(false), user_id(false) {}
  bool error_code :1;
  bool user_id :1;
} _LogoutRes__isset;

class LogoutRes : public virtual ::apache::thrift::TBase {
 public:

  LogoutRes(const LogoutRes&);
  LogoutRes& operator=(const LogoutRes&);
  LogoutRes() : error_code(0), user_id(0) {
  }

  virtual ~LogoutRes() throw();
  int32_t error_code;
  int64_t user_id;

  _LogoutRes__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_user_id(const int64_t val);

  bool operator == (const LogoutRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const LogoutRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogoutRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogoutRes &a, LogoutRes &b);

inline std::ostream& operator<<(std::ostream& out, const LogoutRes& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
