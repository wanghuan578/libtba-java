/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef comsumer_TYPES_H
#define comsumer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace essential { namespace consumer {

struct MessageType {
  enum type {
    MT_SERVICE_LIST_REQ = 1100,
    MT_SERVICE_LIST_RES = 1101,
    MT_SERVICE_LIST_SYNC_NOTIFY = 1102,
    MT_SERVICE_LIST_SYNC_RES = 1103
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

class ServiceListReq;

class ServiceListRes;

class ServiceListSyncNotify;

class ServiceListSyncRes;

typedef struct _ServiceListReq__isset {
  _ServiceListReq__isset() : service_id(false), service_name(false) {}
  bool service_id :1;
  bool service_name :1;
} _ServiceListReq__isset;

class ServiceListReq : public virtual ::apache::thrift::TBase {
 public:

  ServiceListReq(const ServiceListReq&);
  ServiceListReq& operator=(const ServiceListReq&);
  ServiceListReq() : service_id(0), service_name() {
  }

  virtual ~ServiceListReq() throw();
  int32_t service_id;
  std::string service_name;

  _ServiceListReq__isset __isset;

  void __set_service_id(const int32_t val);

  void __set_service_name(const std::string& val);

  bool operator == (const ServiceListReq & rhs) const
  {
    if (!(service_id == rhs.service_id))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    return true;
  }
  bool operator != (const ServiceListReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceListReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceListReq &a, ServiceListReq &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceListReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceListRes__isset {
  _ServiceListRes__isset() : error_code(false), error_text(false), route_list(false) {}
  bool error_code :1;
  bool error_text :1;
  bool route_list :1;
} _ServiceListRes__isset;

class ServiceListRes : public virtual ::apache::thrift::TBase {
 public:

  ServiceListRes(const ServiceListRes&);
  ServiceListRes& operator=(const ServiceListRes&);
  ServiceListRes() : error_code(0), error_text() {
  }

  virtual ~ServiceListRes() throw();
  int32_t error_code;
  std::string error_text;
  std::vector< ::essential::common::RouteInfo>  route_list;

  _ServiceListRes__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_text(const std::string& val);

  void __set_route_list(const std::vector< ::essential::common::RouteInfo> & val);

  bool operator == (const ServiceListRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(route_list == rhs.route_list))
      return false;
    return true;
  }
  bool operator != (const ServiceListRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceListRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceListRes &a, ServiceListRes &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceListRes& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceListSyncNotify__isset {
  _ServiceListSyncNotify__isset() : service_id(false), service_name(false), mode(false), route(false) {}
  bool service_id :1;
  bool service_name :1;
  bool mode :1;
  bool route :1;
} _ServiceListSyncNotify__isset;

class ServiceListSyncNotify : public virtual ::apache::thrift::TBase {
 public:

  ServiceListSyncNotify(const ServiceListSyncNotify&);
  ServiceListSyncNotify& operator=(const ServiceListSyncNotify&);
  ServiceListSyncNotify() : service_id(0), service_name(), mode() {
  }

  virtual ~ServiceListSyncNotify() throw();
  int32_t service_id;
  std::string service_name;
  std::string mode;
   ::essential::common::RouteInfo route;

  _ServiceListSyncNotify__isset __isset;

  void __set_service_id(const int32_t val);

  void __set_service_name(const std::string& val);

  void __set_mode(const std::string& val);

  void __set_route(const  ::essential::common::RouteInfo& val);

  bool operator == (const ServiceListSyncNotify & rhs) const
  {
    if (!(service_id == rhs.service_id))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(route == rhs.route))
      return false;
    return true;
  }
  bool operator != (const ServiceListSyncNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceListSyncNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceListSyncNotify &a, ServiceListSyncNotify &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceListSyncNotify& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceListSyncRes__isset {
  _ServiceListSyncRes__isset() : error_code(false), error_text(false) {}
  bool error_code :1;
  bool error_text :1;
} _ServiceListSyncRes__isset;

class ServiceListSyncRes : public virtual ::apache::thrift::TBase {
 public:

  ServiceListSyncRes(const ServiceListSyncRes&);
  ServiceListSyncRes& operator=(const ServiceListSyncRes&);
  ServiceListSyncRes() : error_code(0), error_text() {
  }

  virtual ~ServiceListSyncRes() throw();
  int32_t error_code;
  std::string error_text;

  _ServiceListSyncRes__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_text(const std::string& val);

  bool operator == (const ServiceListSyncRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    return true;
  }
  bool operator != (const ServiceListSyncRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceListSyncRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceListSyncRes &a, ServiceListSyncRes &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceListSyncRes& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
