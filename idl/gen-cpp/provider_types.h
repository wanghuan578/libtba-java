/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef provider_TYPES_H
#define provider_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace essential { namespace provider {

struct MessageType {
  enum type {
    MT_SERVICE_REGISTER_REQ = 1200,
    MT_SERVICE_REGISTER_RES = 1201
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

class ServiceRegisterReq;

class ServiceRegisterRes;

typedef struct _ServiceRegisterReq__isset {
  _ServiceRegisterReq__isset() : route(false) {}
  bool route :1;
} _ServiceRegisterReq__isset;

class ServiceRegisterReq : public virtual ::apache::thrift::TBase {
 public:

  ServiceRegisterReq(const ServiceRegisterReq&);
  ServiceRegisterReq& operator=(const ServiceRegisterReq&);
  ServiceRegisterReq() {
  }

  virtual ~ServiceRegisterReq() throw();
   ::essential::common::RouteInfo route;

  _ServiceRegisterReq__isset __isset;

  void __set_route(const  ::essential::common::RouteInfo& val);

  bool operator == (const ServiceRegisterReq & rhs) const
  {
    if (!(route == rhs.route))
      return false;
    return true;
  }
  bool operator != (const ServiceRegisterReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceRegisterReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceRegisterReq &a, ServiceRegisterReq &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceRegisterReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceRegisterRes__isset {
  _ServiceRegisterRes__isset() : error_code(false), error_text(false) {}
  bool error_code :1;
  bool error_text :1;
} _ServiceRegisterRes__isset;

class ServiceRegisterRes : public virtual ::apache::thrift::TBase {
 public:

  ServiceRegisterRes(const ServiceRegisterRes&);
  ServiceRegisterRes& operator=(const ServiceRegisterRes&);
  ServiceRegisterRes() : error_code(0), error_text() {
  }

  virtual ~ServiceRegisterRes() throw();
  int32_t error_code;
  std::string error_text;

  _ServiceRegisterRes__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_text(const std::string& val);

  bool operator == (const ServiceRegisterRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    return true;
  }
  bool operator != (const ServiceRegisterRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceRegisterRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceRegisterRes &a, ServiceRegisterRes &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceRegisterRes& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
