/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace essential { namespace service {

struct MessageType {
  enum type {
    MT_SERVICE_STATE_SYNC = 1500,
    MT_SERVICE_STATEY_RES = 1501
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

class ApplicationInfo;

class SystemInfo;

class ServiceInfo;

typedef struct _ApplicationInfo__isset {
  _ApplicationInfo__isset() : pid(false), ppid(false), upstream_flow_total(false), upstream_flow_bytes(false), downstream_flow_total(false), downstream_flow_bytes(false), current_connections(false), max_connections(false) {}
  bool pid :1;
  bool ppid :1;
  bool upstream_flow_total :1;
  bool upstream_flow_bytes :1;
  bool downstream_flow_total :1;
  bool downstream_flow_bytes :1;
  bool current_connections :1;
  bool max_connections :1;
} _ApplicationInfo__isset;

class ApplicationInfo : public virtual ::apache::thrift::TBase {
 public:

  ApplicationInfo(const ApplicationInfo&);
  ApplicationInfo& operator=(const ApplicationInfo&);
  ApplicationInfo() : pid(0), ppid(0), upstream_flow_total(0), upstream_flow_bytes(0), downstream_flow_total(0), downstream_flow_bytes(0), current_connections(0), max_connections(0) {
  }

  virtual ~ApplicationInfo() throw();
  int32_t pid;
  int32_t ppid;
  int32_t upstream_flow_total;
  int32_t upstream_flow_bytes;
  int32_t downstream_flow_total;
  int32_t downstream_flow_bytes;
  int32_t current_connections;
  int32_t max_connections;

  _ApplicationInfo__isset __isset;

  void __set_pid(const int32_t val);

  void __set_ppid(const int32_t val);

  void __set_upstream_flow_total(const int32_t val);

  void __set_upstream_flow_bytes(const int32_t val);

  void __set_downstream_flow_total(const int32_t val);

  void __set_downstream_flow_bytes(const int32_t val);

  void __set_current_connections(const int32_t val);

  void __set_max_connections(const int32_t val);

  bool operator == (const ApplicationInfo & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(ppid == rhs.ppid))
      return false;
    if (!(upstream_flow_total == rhs.upstream_flow_total))
      return false;
    if (!(upstream_flow_bytes == rhs.upstream_flow_bytes))
      return false;
    if (!(downstream_flow_total == rhs.downstream_flow_total))
      return false;
    if (!(downstream_flow_bytes == rhs.downstream_flow_bytes))
      return false;
    if (!(current_connections == rhs.current_connections))
      return false;
    if (!(max_connections == rhs.max_connections))
      return false;
    return true;
  }
  bool operator != (const ApplicationInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplicationInfo &a, ApplicationInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ApplicationInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SystemInfo__isset {
  _SystemInfo__isset() : task_num(false), cpu_num(false), cpu_percent(false), mem_total(false), mem_used(false), mem_avail(false), mem_percent(false), swap_total(false), swap_used(false), swap_avail(false), swap_percent(false), load_average(false) {}
  bool task_num :1;
  bool cpu_num :1;
  bool cpu_percent :1;
  bool mem_total :1;
  bool mem_used :1;
  bool mem_avail :1;
  bool mem_percent :1;
  bool swap_total :1;
  bool swap_used :1;
  bool swap_avail :1;
  bool swap_percent :1;
  bool load_average :1;
} _SystemInfo__isset;

class SystemInfo : public virtual ::apache::thrift::TBase {
 public:

  SystemInfo(const SystemInfo&);
  SystemInfo& operator=(const SystemInfo&);
  SystemInfo() : task_num(0), cpu_num(0), cpu_percent(0), mem_total(0), mem_used(0), mem_avail(0), mem_percent(0), swap_total(0), swap_used(0), swap_avail(0), swap_percent(0), load_average(0) {
  }

  virtual ~SystemInfo() throw();
  int32_t task_num;
  int16_t cpu_num;
  double cpu_percent;
  int32_t mem_total;
  int32_t mem_used;
  int64_t mem_avail;
  double mem_percent;
  int32_t swap_total;
  int32_t swap_used;
  int32_t swap_avail;
  double swap_percent;
  double load_average;

  _SystemInfo__isset __isset;

  void __set_task_num(const int32_t val);

  void __set_cpu_num(const int16_t val);

  void __set_cpu_percent(const double val);

  void __set_mem_total(const int32_t val);

  void __set_mem_used(const int32_t val);

  void __set_mem_avail(const int64_t val);

  void __set_mem_percent(const double val);

  void __set_swap_total(const int32_t val);

  void __set_swap_used(const int32_t val);

  void __set_swap_avail(const int32_t val);

  void __set_swap_percent(const double val);

  void __set_load_average(const double val);

  bool operator == (const SystemInfo & rhs) const
  {
    if (!(task_num == rhs.task_num))
      return false;
    if (!(cpu_num == rhs.cpu_num))
      return false;
    if (!(cpu_percent == rhs.cpu_percent))
      return false;
    if (!(mem_total == rhs.mem_total))
      return false;
    if (!(mem_used == rhs.mem_used))
      return false;
    if (!(mem_avail == rhs.mem_avail))
      return false;
    if (!(mem_percent == rhs.mem_percent))
      return false;
    if (!(swap_total == rhs.swap_total))
      return false;
    if (!(swap_used == rhs.swap_used))
      return false;
    if (!(swap_avail == rhs.swap_avail))
      return false;
    if (!(swap_percent == rhs.swap_percent))
      return false;
    if (!(load_average == rhs.load_average))
      return false;
    return true;
  }
  bool operator != (const SystemInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SystemInfo &a, SystemInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SystemInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceInfo__isset {
  _ServiceInfo__isset() : app(false), system(false), route(false) {}
  bool app :1;
  bool system :1;
  bool route :1;
} _ServiceInfo__isset;

class ServiceInfo : public virtual ::apache::thrift::TBase {
 public:

  ServiceInfo(const ServiceInfo&);
  ServiceInfo& operator=(const ServiceInfo&);
  ServiceInfo() {
  }

  virtual ~ServiceInfo() throw();
  ApplicationInfo app;
  SystemInfo system;
   ::essential::common::RouteInfo route;

  _ServiceInfo__isset __isset;

  void __set_app(const ApplicationInfo& val);

  void __set_system(const SystemInfo& val);

  void __set_route(const  ::essential::common::RouteInfo& val);

  bool operator == (const ServiceInfo & rhs) const
  {
    if (!(app == rhs.app))
      return false;
    if (!(system == rhs.system))
      return false;
    if (!(route == rhs.route))
      return false;
    return true;
  }
  bool operator != (const ServiceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceInfo &a, ServiceInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceInfo& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
