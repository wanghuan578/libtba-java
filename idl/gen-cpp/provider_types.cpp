/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "provider_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace essential { namespace provider {

int _kMessageTypeValues[] = {
  MessageType::MT_SERVICE_REGISTER_REQ,
  MessageType::MT_SERVICE_REGISTER_RES
};
const char* _kMessageTypeNames[] = {
  "MT_SERVICE_REGISTER_REQ",
  "MT_SERVICE_REGISTER_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ServiceRegisterReq::~ServiceRegisterReq() throw() {
}


void ServiceRegisterReq::__set_route(const  ::essential::common::RouteInfo& val) {
  this->route = val;
}

uint32_t ServiceRegisterReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->route.read(iprot);
          this->__isset.route = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceRegisterReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceRegisterReq");

  xfer += oprot->writeFieldBegin("route", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->route.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceRegisterReq &a, ServiceRegisterReq &b) {
  using ::std::swap;
  swap(a.route, b.route);
  swap(a.__isset, b.__isset);
}

ServiceRegisterReq::ServiceRegisterReq(const ServiceRegisterReq& other0) {
  route = other0.route;
  __isset = other0.__isset;
}
ServiceRegisterReq& ServiceRegisterReq::operator=(const ServiceRegisterReq& other1) {
  route = other1.route;
  __isset = other1.__isset;
  return *this;
}
void ServiceRegisterReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceRegisterReq(";
  out << "route=" << to_string(route);
  out << ")";
}


ServiceRegisterRes::~ServiceRegisterRes() throw() {
}


void ServiceRegisterRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void ServiceRegisterRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

uint32_t ServiceRegisterRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceRegisterRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceRegisterRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceRegisterRes &a, ServiceRegisterRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.__isset, b.__isset);
}

ServiceRegisterRes::ServiceRegisterRes(const ServiceRegisterRes& other2) {
  error_code = other2.error_code;
  error_text = other2.error_text;
  __isset = other2.__isset;
}
ServiceRegisterRes& ServiceRegisterRes::operator=(const ServiceRegisterRes& other3) {
  error_code = other3.error_code;
  error_text = other3.error_text;
  __isset = other3.__isset;
  return *this;
}
void ServiceRegisterRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceRegisterRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ")";
}

}} // namespace
