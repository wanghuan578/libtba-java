/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "comsumer_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace essential { namespace consumer {

int _kMessageTypeValues[] = {
  MessageType::MT_SERVICE_LIST_REQ,
  MessageType::MT_SERVICE_LIST_RES,
  MessageType::MT_SERVICE_LIST_SYNC_NOTIFY,
  MessageType::MT_SERVICE_LIST_SYNC_RES
};
const char* _kMessageTypeNames[] = {
  "MT_SERVICE_LIST_REQ",
  "MT_SERVICE_LIST_RES",
  "MT_SERVICE_LIST_SYNC_NOTIFY",
  "MT_SERVICE_LIST_SYNC_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ServiceListReq::~ServiceListReq() throw() {
}


void ServiceListReq::__set_service_id(const int32_t val) {
  this->service_id = val;
}

void ServiceListReq::__set_service_name(const std::string& val) {
  this->service_name = val;
}

uint32_t ServiceListReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceListReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceListReq");

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceListReq &a, ServiceListReq &b) {
  using ::std::swap;
  swap(a.service_id, b.service_id);
  swap(a.service_name, b.service_name);
  swap(a.__isset, b.__isset);
}

ServiceListReq::ServiceListReq(const ServiceListReq& other0) {
  service_id = other0.service_id;
  service_name = other0.service_name;
  __isset = other0.__isset;
}
ServiceListReq& ServiceListReq::operator=(const ServiceListReq& other1) {
  service_id = other1.service_id;
  service_name = other1.service_name;
  __isset = other1.__isset;
  return *this;
}
void ServiceListReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceListReq(";
  out << "service_id=" << to_string(service_id);
  out << ", " << "service_name=" << to_string(service_name);
  out << ")";
}


ServiceListRes::~ServiceListRes() throw() {
}


void ServiceListRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void ServiceListRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

void ServiceListRes::__set_route_list(const std::vector< ::essential::common::RouteInfo> & val) {
  this->route_list = val;
}

uint32_t ServiceListRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->route_list.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->route_list.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->route_list[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.route_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceListRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceListRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("route_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->route_list.size()));
    std::vector< ::essential::common::RouteInfo> ::const_iterator _iter7;
    for (_iter7 = this->route_list.begin(); _iter7 != this->route_list.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceListRes &a, ServiceListRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.route_list, b.route_list);
  swap(a.__isset, b.__isset);
}

ServiceListRes::ServiceListRes(const ServiceListRes& other8) {
  error_code = other8.error_code;
  error_text = other8.error_text;
  route_list = other8.route_list;
  __isset = other8.__isset;
}
ServiceListRes& ServiceListRes::operator=(const ServiceListRes& other9) {
  error_code = other9.error_code;
  error_text = other9.error_text;
  route_list = other9.route_list;
  __isset = other9.__isset;
  return *this;
}
void ServiceListRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceListRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ", " << "route_list=" << to_string(route_list);
  out << ")";
}


ServiceListSyncNotify::~ServiceListSyncNotify() throw() {
}


void ServiceListSyncNotify::__set_service_id(const int32_t val) {
  this->service_id = val;
}

void ServiceListSyncNotify::__set_service_name(const std::string& val) {
  this->service_name = val;
}

void ServiceListSyncNotify::__set_mode(const std::string& val) {
  this->mode = val;
}

void ServiceListSyncNotify::__set_route(const  ::essential::common::RouteInfo& val) {
  this->route = val;
}

uint32_t ServiceListSyncNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->route.read(iprot);
          this->__isset.route = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceListSyncNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceListSyncNotify");

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("route", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->route.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceListSyncNotify &a, ServiceListSyncNotify &b) {
  using ::std::swap;
  swap(a.service_id, b.service_id);
  swap(a.service_name, b.service_name);
  swap(a.mode, b.mode);
  swap(a.route, b.route);
  swap(a.__isset, b.__isset);
}

ServiceListSyncNotify::ServiceListSyncNotify(const ServiceListSyncNotify& other10) {
  service_id = other10.service_id;
  service_name = other10.service_name;
  mode = other10.mode;
  route = other10.route;
  __isset = other10.__isset;
}
ServiceListSyncNotify& ServiceListSyncNotify::operator=(const ServiceListSyncNotify& other11) {
  service_id = other11.service_id;
  service_name = other11.service_name;
  mode = other11.mode;
  route = other11.route;
  __isset = other11.__isset;
  return *this;
}
void ServiceListSyncNotify::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceListSyncNotify(";
  out << "service_id=" << to_string(service_id);
  out << ", " << "service_name=" << to_string(service_name);
  out << ", " << "mode=" << to_string(mode);
  out << ", " << "route=" << to_string(route);
  out << ")";
}


ServiceListSyncRes::~ServiceListSyncRes() throw() {
}


void ServiceListSyncRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void ServiceListSyncRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

uint32_t ServiceListSyncRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceListSyncRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceListSyncRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceListSyncRes &a, ServiceListSyncRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.__isset, b.__isset);
}

ServiceListSyncRes::ServiceListSyncRes(const ServiceListSyncRes& other12) {
  error_code = other12.error_code;
  error_text = other12.error_text;
  __isset = other12.__isset;
}
ServiceListSyncRes& ServiceListSyncRes::operator=(const ServiceListSyncRes& other13) {
  error_code = other13.error_code;
  error_text = other13.error_text;
  __isset = other13.__isset;
  return *this;
}
void ServiceListSyncRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceListSyncRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ")";
}

}} // namespace
