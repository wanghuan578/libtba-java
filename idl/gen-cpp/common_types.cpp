/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace essential { namespace common {

int _kMessageTypeValues[] = {
  MessageType::MT_HELLO_NOTIFY,
  MessageType::MT_HELLO_RES,
  MessageType::MT_KEEPALIVE_REQ,
  MessageType::MT_KEEPALIVE_RES
};
const char* _kMessageTypeNames[] = {
  "MT_HELLO_NOTIFY",
  "MT_HELLO_RES",
  "MT_KEEPALIVE_REQ",
  "MT_KEEPALIVE_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorCodeValues[] = {
  ErrorCode::OK,
  ErrorCode::LOGIN_FAILED,
  ErrorCode::LOGNAME_EXIST,
  ErrorCode::LOGNAME_NOT_EXIST,
  ErrorCode::PASSWORD_ERROR,
  ErrorCode::SERVICE_REGISTER_FAILED
};
const char* _kErrorCodeNames[] = {
  "OK",
  "LOGIN_FAILED",
  "LOGNAME_EXIST",
  "LOGNAME_NOT_EXIST",
  "PASSWORD_ERROR",
  "SERVICE_REGISTER_FAILED"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


AddressInfo::~AddressInfo() throw() {
}


void AddressInfo::__set_ip(const std::string& val) {
  this->ip = val;
}

void AddressInfo::__set_port(const int16_t val) {
  this->port = val;
}

uint32_t AddressInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddressInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddressInfo");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddressInfo &a, AddressInfo &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

AddressInfo::AddressInfo(const AddressInfo& other0) {
  ip = other0.ip;
  port = other0.port;
  __isset = other0.__isset;
}
AddressInfo& AddressInfo::operator=(const AddressInfo& other1) {
  ip = other1.ip;
  port = other1.port;
  __isset = other1.__isset;
  return *this;
}
void AddressInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddressInfo(";
  out << "ip=" << to_string(ip);
  out << ", " << "port=" << to_string(port);
  out << ")";
}


RouteInfo::~RouteInfo() throw() {
}


void RouteInfo::__set_id(const int32_t val) {
  this->id = val;
}

void RouteInfo::__set_name(const std::string& val) {
  this->name = val;
}

void RouteInfo::__set_weight(const int16_t val) {
  this->weight = val;
}

void RouteInfo::__set_address(const AddressInfo& val) {
  this->address = val;
}

uint32_t RouteInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->address.read(iprot);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RouteInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RouteInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RouteInfo &a, RouteInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.weight, b.weight);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

RouteInfo::RouteInfo(const RouteInfo& other2) {
  id = other2.id;
  name = other2.name;
  weight = other2.weight;
  address = other2.address;
  __isset = other2.__isset;
}
RouteInfo& RouteInfo::operator=(const RouteInfo& other3) {
  id = other3.id;
  name = other3.name;
  weight = other3.weight;
  address = other3.address;
  __isset = other3.__isset;
  return *this;
}
void RouteInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RouteInfo(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "address=" << to_string(address);
  out << ")";
}


HelloNotify::~HelloNotify() throw() {
}


void HelloNotify::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void HelloNotify::__set_error_text(const std::string& val) {
  this->error_text = val;
}

void HelloNotify::__set_service_name(const std::string& val) {
  this->service_name = val;
}

void HelloNotify::__set_service_id(const int32_t val) {
  this->service_id = val;
}

void HelloNotify::__set_server_random(const int64_t val) {
  this->server_random = val;
}

void HelloNotify::__set_server_time(const int64_t val) {
  this->server_time = val;
}

uint32_t HelloNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_time);
          this->__isset.server_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HelloNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HelloNotify");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_time", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->server_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HelloNotify &a, HelloNotify &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.service_name, b.service_name);
  swap(a.service_id, b.service_id);
  swap(a.server_random, b.server_random);
  swap(a.server_time, b.server_time);
  swap(a.__isset, b.__isset);
}

HelloNotify::HelloNotify(const HelloNotify& other4) {
  error_code = other4.error_code;
  error_text = other4.error_text;
  service_name = other4.service_name;
  service_id = other4.service_id;
  server_random = other4.server_random;
  server_time = other4.server_time;
  __isset = other4.__isset;
}
HelloNotify& HelloNotify::operator=(const HelloNotify& other5) {
  error_code = other5.error_code;
  error_text = other5.error_text;
  service_name = other5.service_name;
  service_id = other5.service_id;
  server_random = other5.server_random;
  server_time = other5.server_time;
  __isset = other5.__isset;
  return *this;
}
void HelloNotify::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HelloNotify(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ", " << "service_name=" << to_string(service_name);
  out << ", " << "service_id=" << to_string(service_id);
  out << ", " << "server_random=" << to_string(server_random);
  out << ", " << "server_time=" << to_string(server_time);
  out << ")";
}


SessionTicket::~SessionTicket() throw() {
}


void SessionTicket::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void SessionTicket::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void SessionTicket::__set_email(const std::string& val) {
  this->email = val;
}

void SessionTicket::__set_nick_name(const std::string& val) {
  this->nick_name = val;
}

void SessionTicket::__set_client_ip(const std::string& val) {
  this->client_ip = val;
}

void SessionTicket::__set_client_mac(const std::string& val) {
  this->client_mac = val;
}

void SessionTicket::__set_client_version(const std::string& val) {
  this->client_version = val;
}

void SessionTicket::__set_app_id(const int32_t val) {
  this->app_id = val;
}

void SessionTicket::__set_session_id(const std::string& val) {
  this->session_id = val;
}

void SessionTicket::__set_session_key(const std::string& val) {
  this->session_key = val;
}

void SessionTicket::__set_create_time(const int64_t val) {
  this->create_time = val;
}

void SessionTicket::__set_end_time(const int64_t val) {
  this->end_time = val;
}

uint32_t SessionTicket::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_mac);
          this->__isset.client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SessionTicket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SessionTicket");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_mac", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->session_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SessionTicket &a, SessionTicket &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.email, b.email);
  swap(a.nick_name, b.nick_name);
  swap(a.client_ip, b.client_ip);
  swap(a.client_mac, b.client_mac);
  swap(a.client_version, b.client_version);
  swap(a.app_id, b.app_id);
  swap(a.session_id, b.session_id);
  swap(a.session_key, b.session_key);
  swap(a.create_time, b.create_time);
  swap(a.end_time, b.end_time);
  swap(a.__isset, b.__isset);
}

SessionTicket::SessionTicket(const SessionTicket& other6) {
  user_id = other6.user_id;
  user_name = other6.user_name;
  email = other6.email;
  nick_name = other6.nick_name;
  client_ip = other6.client_ip;
  client_mac = other6.client_mac;
  client_version = other6.client_version;
  app_id = other6.app_id;
  session_id = other6.session_id;
  session_key = other6.session_key;
  create_time = other6.create_time;
  end_time = other6.end_time;
  __isset = other6.__isset;
}
SessionTicket& SessionTicket::operator=(const SessionTicket& other7) {
  user_id = other7.user_id;
  user_name = other7.user_name;
  email = other7.email;
  nick_name = other7.nick_name;
  client_ip = other7.client_ip;
  client_mac = other7.client_mac;
  client_version = other7.client_version;
  app_id = other7.app_id;
  session_id = other7.session_id;
  session_key = other7.session_key;
  create_time = other7.create_time;
  end_time = other7.end_time;
  __isset = other7.__isset;
  return *this;
}
void SessionTicket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SessionTicket(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "user_name=" << to_string(user_name);
  out << ", " << "email=" << to_string(email);
  out << ", " << "nick_name=" << to_string(nick_name);
  out << ", " << "client_ip=" << to_string(client_ip);
  out << ", " << "client_mac=" << to_string(client_mac);
  out << ", " << "client_version=" << to_string(client_version);
  out << ", " << "app_id=" << to_string(app_id);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "session_key=" << to_string(session_key);
  out << ", " << "create_time=" << to_string(create_time);
  out << ", " << "end_time=" << to_string(end_time);
  out << ")";
}


CommonNull::~CommonNull() throw() {
}


uint32_t CommonNull::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonNull::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonNull");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonNull &a, CommonNull &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CommonNull::CommonNull(const CommonNull& other8) {
  (void) other8;
}
CommonNull& CommonNull::operator=(const CommonNull& other9) {
  (void) other9;
  return *this;
}
void CommonNull::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonNull(";
  out << ")";
}


CommonRes::~CommonRes() throw() {
}


void CommonRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void CommonRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

uint32_t CommonRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonRes &a, CommonRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.__isset, b.__isset);
}

CommonRes::CommonRes(const CommonRes& other10) {
  error_code = other10.error_code;
  error_text = other10.error_text;
  __isset = other10.__isset;
}
CommonRes& CommonRes::operator=(const CommonRes& other11) {
  error_code = other11.error_code;
  error_text = other11.error_text;
  __isset = other11.__isset;
  return *this;
}
void CommonRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ")";
}


KeepAliveReq::~KeepAliveReq() throw() {
}


void KeepAliveReq::__set_id(const int32_t val) {
  this->id = val;
}

void KeepAliveReq::__set_timestamp_begin(const int64_t val) {
  this->timestamp_begin = val;
}

void KeepAliveReq::__set_serivce_quality(const std::string& val) {
  this->serivce_quality = val;
}

uint32_t KeepAliveReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_begin);
          this->__isset.timestamp_begin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serivce_quality);
          this->__isset.serivce_quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeepAliveReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeepAliveReq");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_begin", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timestamp_begin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serivce_quality", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serivce_quality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeepAliveReq &a, KeepAliveReq &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.timestamp_begin, b.timestamp_begin);
  swap(a.serivce_quality, b.serivce_quality);
  swap(a.__isset, b.__isset);
}

KeepAliveReq::KeepAliveReq(const KeepAliveReq& other12) {
  id = other12.id;
  timestamp_begin = other12.timestamp_begin;
  serivce_quality = other12.serivce_quality;
  __isset = other12.__isset;
}
KeepAliveReq& KeepAliveReq::operator=(const KeepAliveReq& other13) {
  id = other13.id;
  timestamp_begin = other13.timestamp_begin;
  serivce_quality = other13.serivce_quality;
  __isset = other13.__isset;
  return *this;
}
void KeepAliveReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeepAliveReq(";
  out << "id=" << to_string(id);
  out << ", " << "timestamp_begin=" << to_string(timestamp_begin);
  out << ", " << "serivce_quality=" << to_string(serivce_quality);
  out << ")";
}


KeepAliveRes::~KeepAliveRes() throw() {
}


void KeepAliveRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void KeepAliveRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

void KeepAliveRes::__set_id(const int32_t val) {
  this->id = val;
}

void KeepAliveRes::__set_timestamp_begin(const int64_t val) {
  this->timestamp_begin = val;
}

void KeepAliveRes::__set_timestamp_end(const int64_t val) {
  this->timestamp_end = val;
}

uint32_t KeepAliveRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_begin);
          this->__isset.timestamp_begin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_end);
          this->__isset.timestamp_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeepAliveRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeepAliveRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_begin", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timestamp_begin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp_end", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timestamp_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeepAliveRes &a, KeepAliveRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.id, b.id);
  swap(a.timestamp_begin, b.timestamp_begin);
  swap(a.timestamp_end, b.timestamp_end);
  swap(a.__isset, b.__isset);
}

KeepAliveRes::KeepAliveRes(const KeepAliveRes& other14) {
  error_code = other14.error_code;
  error_text = other14.error_text;
  id = other14.id;
  timestamp_begin = other14.timestamp_begin;
  timestamp_end = other14.timestamp_end;
  __isset = other14.__isset;
}
KeepAliveRes& KeepAliveRes::operator=(const KeepAliveRes& other15) {
  error_code = other15.error_code;
  error_text = other15.error_text;
  id = other15.id;
  timestamp_begin = other15.timestamp_begin;
  timestamp_end = other15.timestamp_end;
  __isset = other15.__isset;
  return *this;
}
void KeepAliveRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeepAliveRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ", " << "id=" << to_string(id);
  out << ", " << "timestamp_begin=" << to_string(timestamp_begin);
  out << ", " << "timestamp_end=" << to_string(timestamp_end);
  out << ")";
}

}} // namespace
